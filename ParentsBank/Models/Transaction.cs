using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;

namespace ParentsBank.Models
{
    [CustomValidation(typeof(Transaction),"DateValidation")]
    public class Transaction
    {

        public Transaction()
        {

            TransactionDate = DateTime.Now;

        }
        //Id Generated by the database
        public int Id { get; set; }

        //public int AccountId { get; set; }

        // public Account account { get; set; }

        public DateTime TransactionDate { get; set; }
        [Required(ErrorMessage = "Amount is needed")]
        
        public decimal Amount { get; set; }
        [Required(ErrorMessage = "Note is required!")]
        public String Note { get; set; }



        public virtual Account Account { get; set; }

        public virtual int AccountId { get; set; }


        public static ValidationResult DateValidation(Transaction transaction, ValidationContext context)
        {
            if (transaction == null)
            {

                return ValidationResult.Success;
            }
            if (transaction.TransactionDate > DateTime.Now.Date) {

                return new ValidationResult("Date cannot be in the future!");
            }
            if (transaction.TransactionDate.Year < DateTime.Now.Year) {
                return new ValidationResult("Only transactions in the current year can be recorded");
            }
            if (transaction.Amount == 0) {
                return new ValidationResult("Amount cannot be zero");
            }

            return null; }


        }
}